/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.33
 * Generated at: 2024-12-06 04:07:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import javax.servlet.http.HttpSession;

public final class day6userview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("    /* General Page Styles */\r\n");
      out.write("    body {\r\n");
      out.write("        font-family: Arial, sans-serif;\r\n");
      out.write("        background-color: #f9f9f9;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h1 {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        color: #4CAF50;\r\n");
      out.write("        font-size: 28px;\r\n");
      out.write("        margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* Table Styles */\r\n");
      out.write("    table {\r\n");
      out.write("        width: 80%;\r\n");
      out.write("        margin: 0 auto;\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        background: #fff;\r\n");
      out.write("        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        border-radius: 8px;\r\n");
      out.write("        overflow: hidden;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th, td {\r\n");
      out.write("        padding: 12px 15px;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th {\r\n");
      out.write("        background-color: #4CAF50;\r\n");
      out.write("        color: white;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        text-transform: uppercase;\r\n");
      out.write("        font-size: 14px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    tr:nth-child(even) {\r\n");
      out.write("        background-color: #f2f2f2;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    tr:hover {\r\n");
      out.write("        background-color: #e8f5e9;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    td a {\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: #2196F3;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        transition: color 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    td a:hover {\r\n");
      out.write("        color: #1565C0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    /* Responsive Design */\r\n");
      out.write("    @media (max-width: 768px) {\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            font-size: 12px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        h1 {\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function confirmDel(id) {\r\n");
      out.write("    if (confirm(\"Are you sure you want to delete?\")) {\r\n");
      out.write("        location.href = 'day6deleteuser.jsp?id=' + id;\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<h1>View Your Profile</h1>\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th>Name</th>\r\n");
      out.write("        <th>Email</th>\r\n");
      out.write("        <th>Action</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");

        try {
            // Get the session object and the logged-in user's ID
            HttpSession session = request.getSession();
            Integer userId = (Integer) session.getAttribute("userId"); // Assuming the user ID is stored in the session

            // Check if the user is logged in
            if (userId != null) {
                Class.forName("com.mysql.cj.jdbc.Driver"); // Correct JDBC driver for MySQL
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost/test", "root", ""); // Ensure the database connection details are correct
                
                // Query to select the logged-in user's data only
                String query = "SELECT * FROM user WHERE id = ?";
                PreparedStatement pre = con.prepareStatement(query);
                pre.setInt(1, userId);
                ResultSet rs = pre.executeQuery();
                
                if (rs.next()) {
    
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("NAME") );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( rs.getString("EMAIL") );
      out.write("</td>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <a href=\"day6edituser.jsp?id=");
      out.print( rs.getString("ID") );
      out.write("\">Edit</a> |\r\n");
      out.write("                            <a href=\"#\" onclick=\"confirmDel(");
      out.print( rs.getString("ID") );
      out.write(")\">Delete</a>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("    ");

                } else {
                    out.println("No user found.");
                }
                rs.close();
                pre.close();
                con.close(); // Close the connection after use
            } else {
                out.println("You must be logged in to view your details.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            out.println("Database error: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            out.println("JDBC Driver not found: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            out.println("Error: " + e.getMessage());
        }
    
      out.write("\r\n");
      out.write("</table>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
